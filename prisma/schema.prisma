// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleUser {
  superadmin
  customer
}

model User {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  email    String   @unique @db.VarChar(255)
  password String   @db.VarChar(255)
  role     RoleUser @default(customer)
  order    Order[]

  session Session[]

  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  logo String @db.VarChar(255)

  product Product[]

  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  product Product[]

  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

model Location {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  product Product[]

  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

enum StockProduct {
  ready
  preorder
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String         @db.VarChar(256)
  description String         @db.VarChar(256)
  price       BigInt         @db.BigInt
  stock       StockProduct   @default(ready)
  image       String[]
  brand_id    Int
  brand       Brand          @relation(fields: [brand_id], references: [id])
  category_id Int
  category    Category       @relation(fields: [category_id], references: [id])
  location_id Int
  location    Location       @relation(fields: [location_id], references: [id])
  order       OrderProduct[]
  create_at   DateTime       @default(now())
  update_at   DateTime       @updatedAt
}

enum StatusOrder {
  pending
  success
  failed
}

model Order {
  id        Int            @id @default(autoincrement())
  code      String         @unique @db.Text
  user_id   Int
  user      User           @relation(fields: [user_id], references: [id])
  detail    OrderDetail?
  products  OrderProduct[]
  total     BigInt         @db.BigInt
  status    StatusOrder
  create_at DateTime       @default(now())
  update_at DateTime       @updatedAt
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  order_id  Int      @unique
  order     Order    @relation(fields: [order_id], references: [id])
  name      String   @db.VarChar(256)
  phone     String   @db.VarChar(256)
  address   String   @db.VarChar(256)
  city      String   @db.VarChar(256)
  postal    String   @db.VarChar(256)
  notes     String   @db.VarChar(256)
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

model OrderProduct {
  id         Int      @id @default(autoincrement())
  product_id Int
  product    Product  @relation(fields: [product_id], references: [id])
  order_id   Int
  order      Order    @relation(fields: [order_id], references: [id])
  subtotal   BigInt   @db.BigInt
  quantity   Int
  create_at  DateTime @default(now())
  update_at  DateTime @updatedAt
}
